/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.CollisionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Collisions extends TableImpl<CollisionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.collisions</code>
     */
    public static final Collisions COLLISIONS = new Collisions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollisionsRecord> getRecordType() {
        return CollisionsRecord.class;
    }

    /**
     * The column <code>public.collisions.id</code>.
     */
    public final TableField<CollisionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.collisions.involved_planes</code>.
     */
    public final TableField<CollisionsRecord, Integer[]> INVOLVED_PLANES = createField(DSL.name("involved_planes"), SQLDataType.INTEGER.array(), this, "");

    /**
     * The column <code>public.collisions.collision_time</code>.
     */
    public final TableField<CollisionsRecord, LocalDateTime> COLLISION_TIME = createField(DSL.name("collision_time"), SQLDataType.LOCALDATETIME(1), this, "");

    private Collisions(Name alias, Table<CollisionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Collisions(Name alias, Table<CollisionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.collisions</code> table reference
     */
    public Collisions(String alias) {
        this(DSL.name(alias), COLLISIONS);
    }

    /**
     * Create an aliased <code>public.collisions</code> table reference
     */
    public Collisions(Name alias) {
        this(alias, COLLISIONS);
    }

    /**
     * Create a <code>public.collisions</code> table reference
     */
    public Collisions() {
        this(DSL.name("collisions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CollisionsRecord, Integer> getIdentity() {
        return (Identity<CollisionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CollisionsRecord> getPrimaryKey() {
        return Keys.PK_COLLISIONS;
    }

    @Override
    public Collisions as(String alias) {
        return new Collisions(DSL.name(alias), this);
    }

    @Override
    public Collisions as(Name alias) {
        return new Collisions(alias, this);
    }

    @Override
    public Collisions as(Table<?> alias) {
        return new Collisions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Collisions rename(String name) {
        return new Collisions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Collisions rename(Name name) {
        return new Collisions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Collisions rename(Table<?> name) {
        return new Collisions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Collisions where(Condition condition) {
        return new Collisions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Collisions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Collisions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Collisions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Collisions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Collisions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Collisions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Collisions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Collisions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Collisions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
