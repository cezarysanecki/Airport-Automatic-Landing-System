/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.PlanesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Planes extends TableImpl<PlanesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.planes</code>
     */
    public static final Planes PLANES = new Planes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanesRecord> getRecordType() {
        return PlanesRecord.class;
    }

    /**
     * The column <code>public.planes.id</code>.
     */
    public final TableField<PlanesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.planes.flight_number</code>.
     */
    public final TableField<PlanesRecord, String> FLIGHT_NUMBER = createField(DSL.name("flight_number"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.planes.start_time</code>.
     */
    public final TableField<PlanesRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(1).nullable(false), this, "");

    /**
     * The column <code>public.planes.land_time</code>.
     */
    public final TableField<PlanesRecord, LocalDateTime> LAND_TIME = createField(DSL.name("land_time"), SQLDataType.LOCALDATETIME(1), this, "");

    private Planes(Name alias, Table<PlanesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Planes(Name alias, Table<PlanesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.planes</code> table reference
     */
    public Planes(String alias) {
        this(DSL.name(alias), PLANES);
    }

    /**
     * Create an aliased <code>public.planes</code> table reference
     */
    public Planes(Name alias) {
        this(alias, PLANES);
    }

    /**
     * Create a <code>public.planes</code> table reference
     */
    public Planes() {
        this(DSL.name("planes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PlanesRecord, Integer> getIdentity() {
        return (Identity<PlanesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlanesRecord> getPrimaryKey() {
        return Keys.PK_PLANES;
    }

    @Override
    public Planes as(String alias) {
        return new Planes(DSL.name(alias), this);
    }

    @Override
    public Planes as(Name alias) {
        return new Planes(alias, this);
    }

    @Override
    public Planes as(Table<?> alias) {
        return new Planes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Planes rename(String name) {
        return new Planes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planes rename(Name name) {
        return new Planes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planes rename(Table<?> name) {
        return new Planes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Planes where(Condition condition) {
        return new Planes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Planes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Planes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Planes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Planes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Planes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Planes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Planes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Planes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Planes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
